Setup and Dependencies
Initialize a NodeJS project:
sh
Copy
Edit
mkdir task-manager && cd task-manager
npm init -y
Install dependencies:
sh
Copy
Edit
npm install express sequelize pg pg-hstore body-parser dotenv cors
Install development dependencies:
sh
Copy
Edit
npm install --save-dev nodemon
ğŸ“Œ Database Configuration (Sequelize)
Create a .env file:
env
Copy
Edit
DB_HOST=localhost
DB_USER=your_username
DB_PASS=your_password
DB_NAME=task_manager
DB_PORT=5432
Setup sequelize and define the Task model:
js
Copy
Edit
const { Sequelize, DataTypes } = require('sequelize');
require('dotenv').config();

const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {
    host: process.env.DB_HOST,
    dialect: 'postgres'
});

const Task = sequelize.define('Task', {
    id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true
    },
    title: {
        type: DataTypes.STRING,
        unique: true,
        allowNull: false
    },
    description: DataTypes.TEXT,
    due_date: {
        type: DataTypes.DATE,
        validate: {
            isAfter: new Date().toISOString()
        }
    },
    status: {
        type: DataTypes.ENUM('Pending', 'In Progress', 'Completed'),
        defaultValue: 'Pending'
    },
    priority: {
        type: DataTypes.ENUM('Low', 'Medium', 'High'),
        defaultValue: 'Medium'
    }
});

module.exports = { sequelize, Task };
ğŸ“Œ Building the REST API
Implement API routes in routes/taskRoutes.js:
js
Copy
Edit
const express = require('express');
const { Task } = require('../models/taskModel');
const router = express.Router();

// Create a Task
router.post('/', async (req, res) => {
    try {
        const { title, description, due_date, priority } = req.body;
        const task = await Task.create({ title, description, due_date, priority });
        res.status(201).json(task);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

// Fetch Tasks with filters
router.get('/', async (req, res) => {
    const { priority, due_soon } = req.query;
    let whereClause = {};

    if (priority) whereClause.priority = priority;
    if (due_soon === 'true') {
        const nextThreeDays = new Date();
        nextThreeDays.setDate(nextThreeDays.getDate() + 3);
        whereClause.due_date = { [Op.lte]: nextThreeDays };
    }

    const tasks = await Task.findAll({ where: whereClause });
    res.json(tasks);
});

// Fetch Task by ID
router.get('/:id', async (req, res) => {
    const task = await Task.findByPk(req.params.id);
    task ? res.json(task) : res.status(404).json({ error: 'Task not found' });
});

// Update Task Status
router.put('/:id/status', async (req, res) => {
    const task = await Task.findByPk(req.params.id);
    if (!task) return res.status(404).json({ error: 'Task not found' });

    task.status = req.body.status;
    await task.save();
    res.json(task);
});

module.exports = router;
