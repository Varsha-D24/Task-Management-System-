1. Backend (Node.js - Express.js)
Use OpenAI's API to interact with ChatGPT in your Node.js backend.

Installation:
bash
Copy
Edit
npm install openai dotenv
Backend Code:
javascript
Copy
Edit
import express from "express";
import OpenAI from "openai";
import dotenv from "dotenv";

dotenv.config();

const app = express();
app.use(express.json());

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// ChatGPT API Endpoint
app.post("/chat", async (req, res) => {
    try {
        const { message } = req.body;

        const response = await openai.chat.completions.create({
            model: "gpt-4", // Or "gpt-3.5-turbo"
            messages: [{ role: "user", content: message }],
        });

        res.json({ reply: response.choices[0].message.content });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
2. Frontend (React.js)
Installation:
bash
Copy
Edit
npm install axios
Custom Hook (useChatGPT.js)
javascript
Copy
Edit
import { useState } from "react";
import axios from "axios";

const useChatGPT = () => {
    const [response, setResponse] = useState("");

    const askChatGPT = async (message) => {
        try {
            const res = await axios.post("http://localhost:5000/chat", { message });
            setResponse(res.data.reply);
        } catch (error) {
            console.error("Error:", error);
        }
    };

    return { response, askChatGPT };
};

export default useChatGPT;
Chat Component (Chatbot.js)
javascript
Copy
Edit
import React, { useState } from "react";
import useChatGPT from "./useChatGPT";

const Chatbot = () => {
    const [message, setMessage] = useState("");
    const { response, askChatGPT } = useChatGPT();

    const handleSubmit = (e) => {
        e.preventDefault();
        askChatGPT(message);
    };

    return (
        <div>
            <h2>ChatGPT AI</h2>
            <form onSubmit={handleSubmit}>
                <input 
                    type="text"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    placeholder="Ask something..."
                />
                <button type="submit">Send</button>
            </form>
            <p>Response: {response}</p>
        </div>
    );
};

export default Chatbot;
3. API Gateway (Node.js Middleware)
To restrict requests containing the word "test":

javascript
Copy
Edit
app.use((req, res, next) => {
    if (req.body.message && req.body.message.toLowerCase().includes("test")) {
        return res.status(400).json({ error: "Invalid input: 'test' is not allowed." });
    }
    next();
});
4. Deployment
Store the API key securely in an .env file:
ini
Copy
Edit
OPENAI_API_KEY=your_secret_key
Use a proxy in package.json for CORS handling.
